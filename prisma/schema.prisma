generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum Variant {
  imported
  ready
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String? // para Credentials
  role          String    @default("marketing") // "admin" | "marketing"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id             BigInt            @id @default(autoincrement())
  sku            String            @unique
  name           String
  slug           String            @unique
  description    String?
  variant        Variant
  price          Decimal           @db.Decimal(12, 2)
  showPrice      Boolean           @default(true)
  active         Boolean           @default(true)
  featured       Boolean           @default(false)
  orderIndex     Int               @default(0)
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  images         ProductImage[]
  categories     ProductCategory[]
  QuoteItem      QuoteItem[]
}

model ProductImage {
  id        BigInt  @id @default(autoincrement())
  productId BigInt
  url       String
  alt       String?
  position  Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id       BigInt            @id @default(autoincrement())
  name     String            @unique
  slug     String            @unique
  products ProductCategory[]
}

model ProductCategory {
  productId  BigInt
  categoryId BigInt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model Quote {
  id            BigInt      @id @default(autoincrement())
  variant       Variant
  customerName  String?
  customerEmail String?
  customerPhone String?
  company       String?
  cnpj          String?
  address       String?
  note          String?
  createdAt     DateTime    @default(now())
  items         QuoteItem[]
}

model QuoteItem {
  quoteId   BigInt
  productId BigInt?
  sku       String
  name      String
  price     Decimal @db.Decimal(12, 2)
  qty       Int     @default(1)

  image     String?
  position  Int?

  quote   Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@id([quoteId, sku])
}
